package com.boutouil.dynamodb.config;

import io.awspring.cloud.dynamodb.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.core.type.classreading.CachingMetadataReaderFactory;
import org.springframework.core.type.classreading.MetadataReader;
import org.springframework.core.type.classreading.MetadataReaderFactory;
import org.springframework.core.type.filter.AnnotationTypeFilter;
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient;
import software.amazon.awssdk.enhanced.dynamodb.TableSchema;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AtomicCounterExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedUuidExtension;
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.DynamoDbBean;
import software.amazon.awssdk.services.dynamodb.DynamoDbClient;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Configuration
@RequiredArgsConstructor
@EnableConfigurationProperties(DynamoDbProperties.class)
@ConditionalOnProperty(name = "spring.cloud.aws.dynamodb.enabled", havingValue = "true", matchIfMissing = true)
public class DynamoDbConfiguration {

    private final Map<String, Class<?>> entityClasses = new HashMap<>();
    private final DynamoDbProperties properties;

    @Bean
    public PathMatchingResourcePatternResolver resourcePatternResolver() {
        return new PathMatchingResourcePatternResolver();
    }

    @Bean
    public MetadataReaderFactory metadataReaderFactory(PathMatchingResourcePatternResolver resourcePatternResolver) {
        return new CachingMetadataReaderFactory(resourcePatternResolver);
    }

    @Bean
    @Primary
    @ConditionalOnMissingBean(DynamoDbOperations.class)
    public DynamoDbTemplate dynamoDBTemplate(DynamoDbEnhancedClient dynamoDbEnhancedClient,
                                             DynamoDbTableSchemaResolver tableSchemaResolver, DynamoDbTableNameResolver dynamoDbTableNameResolver) {
        return new DynamoDbTemplate(dynamoDbEnhancedClient, tableSchemaResolver, dynamoDbTableNameResolver);
    }

    @Bean
    @Primary
    public DynamoDbEnhancedClient dynamoDbEnhancedClient(DynamoDbClient dynamoDbClient) {
        return DynamoDbEnhancedClient.builder()
                .extensions(AutoGeneratedUuidExtension.create(),
                        VersionedRecordExtension.builder().build(),
                        AutoGeneratedTimestampRecordExtension.create(),
                        AtomicCounterExtension.builder().build())
                .dynamoDbClient(dynamoDbClient)
                .build();
    }

    @Bean
    @Primary
    public DynamoDbTableSchemaResolver dynamoDbTableSchemaResolver(PathMatchingResourcePatternResolver resourcePatternResolver,
                                                                   MetadataReaderFactory metadataReaderFactory) {
        scanDynamoDbEntities(resourcePatternResolver, metadataReaderFactory);
        List<TableSchema<?>> schemas = new ArrayList<>();
        for (Class<?> entityClass : entityClasses.values()) {
            schemas.add(TableSchema.fromBean(entityClass));
        }
        return new DefaultDynamoDbTableSchemaResolver(schemas);
    }

    @Bean
    @Primary
    public DynamoDbTableInitializer dynamoDbTableInitializer(DynamoDbEnhancedClient dynamoDbEnhancedClient,
                                                             DynamoDbClient dynamoDbClient) {
        return new DynamoDbTableInitializer(dynamoDbEnhancedClient, dynamoDbClient, entityClasses, properties.isDdlEnabled());
    }

    private void scanDynamoDbEntities(PathMatchingResourcePatternResolver resourcePatternResolver,
                                      MetadataReaderFactory metadataReaderFactory) {
        AnnotationTypeFilter annotationFilter = new AnnotationTypeFilter(DynamoDbBean.class);

        for (String basePackage : properties.getPackages()) {
            try {
                String packageSearchPath = PathMatchingResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + basePackage.replace('.', '/') + "/**/*.class";

                Resource[] resources = resourcePatternResolver.getResources(packageSearchPath);
                for (Resource resource : resources) {
                    try {
                        MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource);
                        String className = metadataReader.getClassMetadata().getClassName();

                        if (!className.startsWith(basePackage)) {
                            continue;
                        }

                        if (annotationFilter.match(metadataReader, metadataReaderFactory)) {
                            Class<?> clazz = Class.forName(className);
                            String tableName = getTableNameFromClass(clazz);
                            if (tableName != null) {
                                entityClasses.put(tableName, clazz);
                                log.info("Found DynamoDB entity: {} with table name: {}", className, tableName);
                            }
                        }
                    } catch (Exception e) {
                        log.warn("Failed to process class: {}, error: {}", resource.getFilename(), e.getMessage());
                    }
                }
            } catch (Exception e) {
                log.error("Failed to scan package: {}, error: {}", basePackage, e.getMessage());
            }
        }

        log.info("Found {} DynamoDB entities in specified packages", entityClasses.size());
    }

    private String getTableNameFromClass(Class<?> clazz) {
        try {
            Method method = clazz.getDeclaredMethod("getTableName");
            method.setAccessible(true);
            return (String) method.invoke(null);
        } catch (Exception e) {
            log.warn("Failed to get table name from class: {}, using class name", clazz.getSimpleName());
            return clazz.getSimpleName().toLowerCase();
        }
    }
}