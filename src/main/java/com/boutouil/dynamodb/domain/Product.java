package com.boutouil.dynamodb.domain;

import lombok.*;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAtomicCounter;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedTimestampAttribute;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedUuid;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbVersionAttribute;
import software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.*;

import java.io.Serial;
import java.io.Serializable;
import java.time.Instant;

@Data
@NoArgsConstructor
@AllArgsConstructor
@DynamoDbBean
@Builder
@ToString
public class Product implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;
    private static final String TABLE_NAME = "product";

    @Getter(onMethod_ = {
            @DynamoDbPartitionKey,
            @DynamoDbAutoGeneratedUuid,
            @DynamoDbUpdateBehavior(value = UpdateBehavior.WRITE_IF_NOT_EXISTS),
            @DynamoDbAttribute("id")
    })
    private String id;

    @Getter(onMethod_ = {@DynamoDbAttribute("name")})
    private String name;

    @Getter(onMethod_ = {@DynamoDbAttribute("price")})
    private Double price;

    @Getter(onMethod_ = {@DynamoDbAttribute("category")})
    private String category;

    @Getter(onMethod_ = {@DynamoDbAttribute("stock_quantity"), @DynamoDbIgnoreNulls})
    private Integer stockQuantity;

    @Getter(onMethod_ = {
            @DynamoDbAttribute("last_updated_date"),
            @DynamoDbAutoGeneratedTimestampAttribute
    })
    private Instant lastUpdatedDate;

    @Getter(onMethod_ = {
            @DynamoDbAttribute("version"),
            @DynamoDbVersionAttribute
    })
    private Long version;

    @Getter(onMethod_ = {
            @DynamoDbAttribute("sequence_number"),
            @DynamoDbAtomicCounter(startValue = 1)
    })
    private Long sequenceNumber;

    @Getter(onMethod_ = {
            @DynamoDbAttribute("retry_count"),
            @DynamoDbAtomicCounter(startValue = 0)
    })
    private Long retryCount;

    @DynamoDbIgnore
    public static String getTableName() {
        return TABLE_NAME;
    }
}